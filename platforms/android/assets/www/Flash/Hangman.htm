<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>Hangman</title>
    <meta http-equiv="content-type" content="text/html"/>
    <style type="text/css">
        body{font: 12px/1.4 Verdana,Arial,sans-serif;
            text-align: center;background: #FFF}
        p{margin:0;padding: 5px 10px 10px}
        table{margin:0 auto;border-width: 0px}
        tr{border-width: 0px}
        td{text-align: left;padding-left: 10px; padding-right: 10px;border-width: 0px}
        div#container{width:85%;height:85%;min-width:550px;max-width: 1000px;text-align: left;margin: 0 auto}
        div#header{margin-bottom: 10px;background-color: #FFF499;color: #C39876}
        h1{margin:0;padding: 0 10px}
        div#content-container{float:left;width:69%;background: #E0EBEB; text-align: center;}
        div#targetBox{background: #E0EBEB;font-size:200%; text-align: center;}
        div#content{background: #E0EBEB;font-size:200%; text-align: center;}
        div#pic{background: #E0EBEB;font-size:150%; text-align: center; }
        div#status{background: #E0EBEB;font-size:100%; text-align: center;}
        div#menu,div#links{float:right;width:30%;font-size:75%}
        div#menu{background: #F7E1AB}
        div#links{clear: right;margin-top: 10px;background: #DBE89A}
        div#footer{float:left;clear:left;width:69%;margin:20px 0;padding: 4px 0;background: #BBBAC1}
        div#footer p{padding: 0 10px}
        div#help{margin: 0px 20px 0px 20px;float:left;clear:both;display: none}
        .demo  {color:#000033; background-color:#cccccc; clear:both;z-index:99; visibility:hidden;}
        div{padding: 5px 0}
    </style>

    <script type="text/javascript" src="domCorners.js"></script>

    <script type="text/javascript" src="flashcards.js"></script>
    <script type="text/javascript">
        var djConfig = {isDebug: true};//, debugAtAllCosts: true};
    </script>
    <script type="text/javascript" src="dojo.js"></script>

    <script type="text/javascript">
        dojo.require("dojo.io.*");          // for Ajax requests
        
        if(DomCheck())
        {
            DomCorners("header","transparent.gif",5);
            DomCorners("content-container","transparent.gif",5);
            DomCorners("menu","transparent.gif",5);
            DomCorners("links","transparent.gif",5);
            DomCorners("footer","small.gif",2);
        }
        
        // global variables
        var deck = new CardDeck(showFunction); 		
        var targetWord; // contains the current target word from the edited deck
        var box = 0; // holds pointer to box for wrong character - up to 7
        var displayWord;
        var oldChars = '';
        var seeit = false;
        var descriptions = new Array();
        var topicItems = new Array();
        var acceptingInput = false;
        var maxWords = 5;
          
        // displays current card object - called whenever we change a card
        function showFunction()
        {
            //clear boxes to hold wrong characters
            for(var i = 0; i < 7 ; i++)
            {
                document.getElementById('box'+i).innerHTML='&nbsp;';
            }
            box=0;
            oldChars='';
            var curCard = this.getCard();	// get current card
            changeLayerContent("content",curCard.frontText); // show front
            targetWord=curCard.backText.toLowerCase(); //save back
            //set number of blanks
            displayWord='';
            var wordArray = targetWord.split(" "); // only a few words allowed
            var yArray= new Array();
            
            for(var j = 0;j<wordArray.length;j++)
            {
                yArray[j]='';
                for(var i = 0; i < wordArray[j].length ; i++)
                {
                    yArray[j]+='_';
                }
            } 
            displayWord=yArray[0];
            for(var i = 1; i < yArray.length; i++)
            {
                displayWord+=' '+yArray[i]
            }
            // reset status etc.
            acceptingInput=true;
            changeLayerContent('status','Click on or type a letter');
            showWord();
        }

        /**
        Function to check a character against the target
        */
        function checkChar(charHit)
        {
            if(acceptingInput)
            {
                var match = false;
                if(oldChars.indexOf(charHit)<0 )
                {
                    oldChars+=charHit;
                    for(var i = 0; i < targetWord.length; i++)
                    {
                        if(targetWord.charAt(i)==charHit)
                        {
                            scoreHit(i); // matching char, do the business
                            
                            match=true;
                        }
                    }
                    if(!match)
                    {
                        scoreMiss(charHit);
                    }
                    else
                    {
                        showWord();
                    }
                }
                else 
                {
                    changeLayerContent('status','character '+charHit+' already pressed');
                }
            }
        }

        
        /**
        Function to score a hit - matching letter found, update at location i
        Check if word is complete for a winner
        */
        function scoreHit(i)
        {
            changeLayerContent('status','');
            var first = displayWord.substring(0,i);
            var last = displayWord.substring(i+1,displayWord.length);
            displayWord= first + targetWord.charAt(i) + last;
            if(displayWord.indexOf('_')==-1)
            {
                changeLayerContent('status','<div style="font-size:250%;">That\'s right. Well done!<div>');
                acceptingInput=false;
            }
        }
        
        function showWord()
        {
            var yWord='';
            for (var i=0; i<displayWord.length; i++)
            {
                yWord+=displayWord.charAt(i)+'&nbsp;';
            }
            changeLayerContent("targetBox", yWord);
        }

        /**
        Function to score a miss - no matching letter found, add to misses
        */
        function scoreMiss(charHit)
        {
            if(box==7)
            {
                //game over
                changeLayerContent('status','You lost. What a shame!');
                var yWord='';
                for (var i=0; i<displayWord.length; i++)
                {
                    if(displayWord.charAt(i) != targetWord.charAt(i))
                    {
                        color="red";
                    }
                    else
                    {
                        color="black";
                    }
                    yWord+='<span style="color:'+color+';">'+targetWord.charAt(i)+'&nbsp;<\/span>';
                }
                changeLayerContent("targetBox", yWord);
                acceptingInput=false;
            }
            else
            {
                var yBox = document.getElementById("box"+box);
                yBox.innerHTML=charHit;
                box++;
                var tail = 'You have '+(7-box)+' lives left';
                if (box == 7) 
                {
                    tail = "One last try...";
                }
                changeLayerContent('status','<div style="color:red">Sorry, that is a miss. '+ tail + '</div>');
            }
        }

        // count the number of words in a string and make sure they are in our alfaBet
        function checkWord(cardString)
        {
            var cString = cardString;//stripHtml(cardString);
            var wordArray = cString.split(" ");
            return ((wordArray.length < maxWords)&& isAlpha(cString));
        }
        var alfaBet = ' abcdefghijklmnopqrstuvwxyz' +
                        'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +
                        'áÁéÉíÍóÓúÚüÜñÑ¿?¡!'
        function isAlpha(inStr)
        {
            var retVal = true;
            for (var i = 0; i<inStr.length && retVal; i++)
            {
                if(alfaBet.indexOf(inStr.charAt(i)) == -1)
                {
                    retVal = false; // found character not in our alfaBet
                }
            }
            return retVal;
        }

        function changeLayerContent(layer,msgStr)
        {
            if(document.getElementById)
            {
                  var thisLayer = document.getElementById(layer);
                  thisLayer.innerHTML = msgStr;
            }
        }
        // retrieve text of an XML document element, including
        // elements using namespaces
        function getElementTextNS(prefix, local, parentElem, index) {
            var result = "";
            if (prefix && window.ActiveXObject) {
                // IE/Windows way of handling namespaces
                result = parentElem.getElementsByTagName(prefix + ":" + local)[index];
            } else {
                // the namespace versions of this method 
                // (getElementsByTagNameNS()) operate
                // differently in Safari and Mozilla, but both
                // return value with just local name, provided 
                // there aren't conflicts with non-namespace element
                // names
                result = parentElem.getElementsByTagName(local)[index];
            }
            if (result) {
                // get text, accounting for possible
                // whitespace (carriage return) text nodes 
                if (result.childNodes.length > 1) {
                    var pack ="";
                    for (var i=0; i<result.childNodes.length; i++)
                    {
                        pack += (result.childNodes[i].nodeValue).replace(/^\s+|\s+$/g, "");
                    }
                    return pack;
                } else {
                    return result.firstChild.nodeValue;    		
                }
            } else {
                return "n/a";
            }
        }
        function setup()
        {
            var loadTopics = {
                url:        "topics.xml",
                mimetype:   "text/xml",
                error:      function(type, errObj){
                // handle error here
    },
    
                load:       buildTopicList
                };

            // dispatch the request
            var requestObj = dojo.io.bind(loadTopics);
            
            if (document.getElementsByTagName)
            {
                 var anchors = document.getElementsByTagName("a");
                 for (var i=0; i<anchors.length; i++) {
                    var anchor = anchors[i];
                    if (anchor.getAttribute("href") && anchor.getAttribute("rel") == "external")
                    {
                        anchor.target = "_blank";
                        anchor.title += " opens in new page";
                    }
                 } 
            }
        }

        // invoked by "topics" select element change;
        // loads chosen XML document
        function loadDoc(evt) 
        {
            // equalize W3C/IE event models to get event object
            evt = (evt) ? evt : ((window.event) ? window.event : null);
            if (evt) 
            {
                // equalize W3C/IE models to get event target reference
                var elem = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null);
                if (elem) 
                {
                    try 
                    {
                        if (elem.selectedIndex > 0) 
                        {
                            //c = new CardDeck();
                            var file = elem.options[elem.selectedIndex].value;
                            var loadDoc = {
                                url:        file,
                                mimetype:   "text/xml",
                                error:      function(type, errObj){
                                // handle error here
                                },
                    
                                load:       buildDeckFromXML
                                };

                            // dispatch the request
                            var requestObj = dojo.io.bind(loadDoc);
                            if(document.getElementById) //later browsers let us set inner html
                            {
                                document.getElementById("description").innerHTML = descriptions[file];
                            }
                        }	
                    }
                    catch(e) 
                    {
                        var msg = (typeof e == "string") ? e : ((e.message) ? e.message : "Unknown Error");
                        alert("Unable to get XML data:\n" + msg);
                        return;
                    }
                }
            }
        }
        
        // add cards with items from
        // the current XML document
        function buildDeckFromXML(type,xml,evt) 
        {
            deck = new CardDeck(showFunction)
            var items = xml.getElementsByTagName("c");
            // loop through <c> elements, and add a card to the deck
            // using the <f> and <b> elements
            // when number of <b> words less than maxWords and all alpha
            for (var i = 0; i < items.length; i++) 
            {
                var front = getElementTextNS("", "f", items[i], 0);
                var back = getElementTextNS("", "b", items[i], 0);
                if (checkWord(back))
                {
                    deck.addCard(front,back);
                    
                }
                
            }
            deck.shuffle();
            deck.displayCard();
        }

        /**
        Function to translate keyboard input into lowercase character, with tilde
        or inverted punctuation, if shift pressed.
        */
        function Text1_onkeyup(e) 
        {
//            window.alert(alfaBet.charAt(e.keyCode-64)+" key pressed");
//            window.alert(String.fromCharCode(e.keyCode)+" key pressed");
            var charHit=String.fromCharCode(e.keyCode).toLowerCase();
            if(e.keyCode==49)
            {
                charHit='!';
            }
            if(e.keyCode==191)
            {
                charHit='?';
            }
            if(e.shiftKey) 
            {
                // shift key makes tilde
                if(charHit=='a') charHit='á';
                if(charHit=='e') charHit='é';
                if(charHit=='i') charHit='í';
                if(charHit=='o') charHit='ó';
                if(charHit=='u') 
                {
                    if(e.altKey)
                    {
                        charHit='ü';
                    }
                    else 
                    {
                        charHit='ú';
                    }
                }
                if(charHit=='n') charHit='ñ';
                if(charHit=='!') charHit='¡';
                if(charHit=='?') charHit='¿';
            }
            if(alfaBet.indexOf(charHit) >= 0) //only if in alfaBet 
            {
                checkChar(charHit);
            }
        }

        // fill Topics select list with items from
        // the XML topics document
        function buildTopicList(type,xml,evt) {
            var topicSelect = document.getElementById("topics");
            var topics = xml.getElementsByTagName("topic"); 
            
            var topicName;
            var file;
            var title;
            
            // loop through <topics> elements, adding them to the topics select element with entry the <topicname>
            // and add each nested <item> element to an array for later populating the items select element
            for (var i = 0; i < topics.length; i++) {
                // within each topic, save the <item>s in an associative array on <topicname>
                topicName = getElementTextNS("", "topicname", topics[i], 0);
                
                appendToSelect(topicSelect, topicName, document.createTextNode(topicName) );
                descriptions[topicName] = new Array();
                topicItems[topicName] = new Array();
                var items = topics[i].getElementsByTagName("item");
                for (var j = 0; j < items.length; j++)
                {
                    file = getElementTextNS("", "file", items[j], 0);
                    title = getElementTextNS("", "title", items[j], 0);
                    
                    var entry = new Array();
                    entry["file"] = file;
                    entry["title"] = document.createTextNode(title);
                    topicItems[topicName][j] = entry;
                    descriptions[file] = getElementTextNS("", "descr", items[j], 0);
                }
            }
        }
        
        // empty select list content
        function clearList(select) {
            while (select.length > 0) {
                select.remove(0);
            }
        }
        
        //set up the second select box with the files in this topic
        function Select1_onchange() 
        {
            
            var topicSelect = document.getElementById("topics");
            var itemSelect = document.getElementById("items");
            var topic = topicSelect.options[topicSelect.selectedIndex].value;
            setItems(itemSelect, topic);
        }

        // add item to select element 
        function appendToSelect(select, value, content) {
            var opt;
            opt = document.createElement("option");
            opt.value = value;
            opt.appendChild(content);
            select.appendChild(opt);
        }

        // fill items select list from array topicItems
        function setItems(select, topicName)
        {
            clearList(select);
            appendToSelect(select,"",document.createTextNode("now a section..."));
            for (var i = 0; i < topicItems[topicName].length; i++)
            {
                var value = topicItems[topicName][i]["file"];
                var content = topicItems[topicName][i]["title"];
                appendToSelect(select, value,content );
            }

        }

        
        function flipme( id )
        {
            seeit = seeit ? false : true;
            toggleBox(id, seeit);
        }
        // largely pinched from http://www.geocities.com/technofundo/tech/js/showhide.html
        function toggleBox(szDivID, iState) // 1 visible, 0 hidden
        {
            if(document.layers)	   //NN4+
            {
               document.layers[szDivID].visibility = iState ? "show" : "hide";
            }
            else if(document.getElementById)	  //gecko(NN6) + IE 5+
            {
                var obj = document.getElementById(szDivID);
                obj.style.visibility = iState ? "visible" : "hidden";
            }
            else if(document.all)	// IE 4
            {
                document.all[szDivID].style.visibility = iState ? "visible" : "hidden";
            }
            location.hash = seeit ? '#help' : '#top';// this bit is all my own work!
        }

        function NextButton_onclick() 
        {
            deck.forward();
        }

    </script>

</head>
<body onload="setup();" onkeyup="return Text1_onkeyup(event)">
    <div id="container">
        <a name='top' />
        <div id="header">
            <h1>Hangman</h1>
        </div>
        <div id="content-container" >
            <div id="targetBox" >
            </div>
            <div id="content">
                Load words by choosing a topic...
            </div>
            <div id="pic">
            
                <table>
                    <tr>
                        <td onclick="checkChar('q');">Q</td>
                        <td onclick="checkChar('w');">W</td>
                        <td onclick="checkChar('e');">E</td>
                        <td onclick="checkChar('r');">R</td>
                        <td onclick="checkChar('t');">T</td>
                        <td onclick="checkChar('y');">Y</td>
                        <td onclick="checkChar('u');">U</td>
                        <td onclick="checkChar('i');">I</td>
                        <td onclick="checkChar('o');">O</td>
                        <td onclick="checkChar('p');">P</td>
                    </tr>
                    <tr>
                        <td onclick="checkChar('a');">A</td>
                        <td onclick="checkChar('s');">S</td>
                        <td onclick="checkChar('d');">D</td>
                        <td onclick="checkChar('f');">F</td>
                        <td onclick="checkChar('g');">G</td>
                        <td onclick="checkChar('h');">H</td>
                        <td onclick="checkChar('j');">J</td>
                        <td onclick="checkChar('k');">K</td>
                        <td onclick="checkChar('l');">L</td>
                    </tr>
                    <tr>
                        <td></td>
                        <td onclick="checkChar('z');">Z</td>
                        <td onclick="checkChar('x');">X</td>
                        <td onclick="checkChar('c');">C</td>
                        <td onclick="checkChar('v');">V</td>
                        <td onclick="checkChar('b');">B</td>
                        <td onclick="checkChar('n');">N</td>
                        <td onclick="checkChar('m');">M</td>
                        <td></td>
                        <td onclick="checkChar('ü');">Ü</td>
                    </tr>
                    <tr>
                        <td onclick="checkChar('á');">Á</td>
                        <td onclick="checkChar('é');">É</td>
                        <td onclick="checkChar('í');">Í</td>
                        <td onclick="checkChar('ó');">Ó</td>
                        <td onclick="checkChar('ú');">Ú</td>
                        <td onclick="checkChar('ñ');">Ñ</td>
                        <td onclick="checkChar('!');">!</td>
                        <td onclick="checkChar('¡');">¡</td>
                        <td onclick="checkChar('?');">?</td>
                        <td onclick="checkChar('¿');">¿</td>
                    </tr>
                </table>
            
                <table>
                    <tr style="color:Red" bgcolor="#ffffff">
                        <td id='box0' >&nbsp;</td>
                        <td id='box1' >&nbsp;</td>
                        <td id='box2' >&nbsp;</td>
                        <td id='box3' >&nbsp;</td>
                        <td id='box4' >&nbsp;</td>
                        <td id='box5' >&nbsp;</td>
                        <td id='box6' >&nbsp;</td>
                    </tr>
                </table>
            </div>
            <div id="status"  style="height: 40px">
            No words loaded
            </div>
        </div>
        <div id="menu" style="text-align: center">
            <p>
                <select id="topics" style="width: 85%" language="javascript" onchange="return Select1_onchange()">
                    <option selected="selected">Choose a topic...</option>
                </select></p>
            <p><select id="items" style="width: 85%" 
                onchange="loadDoc(event); self.focus();" onfocus="options[0].selected = true; return false;" >
                <OPTION VALUE="empty option for focus"></OPTION> <option selected="selected">then a section...</option>
            </select></p>
            <div id = "description">
                This site uses Javascript, and needs a modern browser
            </div>
            <a href="VerbReview.html" title="sibling page" rel="external">Verb Review</a><br />
            <a href="Kim.html">Pelmanism</a><br />
            <a href="Index.html">Flash Cards</a><br />
            <a href="javascript:flipme('helpme');" title="Show/hide help">Help </a>
        </div>
        <div id="links">
            <p>
                Site construction by Mark Booth, nmb2 at tutor dot open dot ac dot uk</p>
            <p>
                Page design based on work by <a href="http://web-graphics.com/mtarchive/001660.php">Alessandro Fulciniti</a></p>
        </div>
        <div id="footer">
            <p style="text-align: center;">
                &nbsp;
                <input id="NextButton" title="Next card (Alt-n)" type="button" value="Next" language="javascript" onclick="return NextButton_onclick()"
                    accesskey="n" />
            </p>
            <p style="text-align: center;">
                &nbsp;</p>
        </div>
        <br />
        <div id="helpme" class="demo">
            <a name='help' />
            <h3>About Hangman</h3>
            <a href="javascript:flipme('helpme');" title="Hide help"><p style="font-size: 8pt">
               [Hide Help]</p></a>
            <p>
                A simple game based on the childhood favourite. You are given an English word or phrase
                and a clue as to the number of letters in the Spanish equivalent. By guessing letters you
                can construct the Spanish word(s). But you only have seven lives! Seven wrong guesses and
                you lose!</p>
            <h3>Usage</h3>
            <p>
                First of all use the drop down controls to select a set of cards to work with.
                The cards are held in files on the web server.</p>
            <p>
                When the file is loaded the English word from a random first card will appear. The deck is shuffled when it is
                first loaded and any cards with more than two Spanish words are dropped. Pressing Next will show
                another card if you don't like the look of the one presented.</p>
            <p>
                You can use your mouse to select letters, or the keyboard. To get the accented characters press
                the shift key with the appropriate letter. To get the u-umlaut hold both shift and alt keys down
                with the u key.
            </p>
            <h3>Credits</h3>
            <p>
                Large parts of the code and design of this program are "borrowed" from findings
                on the web. I have tried to retain the original details in comments or wherever, assuming a free 
                license where not specifically forbidden.</p>
            <p>
                Feel free to pinch any of this that you like the look of, but do retain the credit
                for the original authors.</p>
            <h4>Mark Booth 2006</h4>
            nmb2 at tutor dot open dot ac dot uk
            <a href="javascript:flipme('helpme');" title="Hide help">Hide Help </a>
            <br />
            <br />
        </div>
    </div>
</body>
</html>
